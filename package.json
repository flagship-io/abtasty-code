{
  "name": "abtasty-code",
  "displayName": "AB Tasty",
  "description": "Extension to manage abtasty from vscode",
  "publisher": "ABTasty",
  "license": "SEE LICENSE IN LICENSE.md",
  "repository": "https://github.com/flagship-io/abtasty-code",
  "version": "0.2.0",
  "engines": {
    "vscode": "^1.72.0"
  },
  "categories": [
    "Data Science"
  ],
  "icon": "media/logo.png",
  "activationEvents": [
    "onStartupFinished"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "configuration": {
      "type": "object",
      "title": "Flagship",
      "properties": {
        "abtasty.baseUri": {
          "type": "string",
          "default": "https://abtasty.com"
        },
        "abtasty.explorer": {
          "type": "string",
          "default": "welcomePage",
          "description": "Enable feature flag explorer in your sidebar"
        },
        "abtasty.featureExperimentation.flagsInFile": {
          "type": "boolean",
          "default": "",
          "description": "Flagship Flags in File"
        },
        "abtasty.featureExperimentation.authenticationList": {
          "type": "Authentication[]",
          "default": [],
          "description": "List of authentication stored"
        },
        "abtasty.featureExperimentation.currentAuthentication": {
          "type": "Authentication",
          "default": {},
          "description": "current running authentication"
        },
        "abtasty.webExperimentation.authenticationList": {
          "type": "Authentication[]",
          "default": [],
          "description": "List of authentication stored"
        },
        "abtasty.webExperimentation.currentAuthentication": {
          "type": "Authentication",
          "default": {},
          "description": "current running authentication"
        }
      }
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "abtasty",
          "title": "AB Tasty",
          "icon": "resources/logo.svg"
        }
      ]
    },
    "views": {
      "abtasty": [
        {
          "id": "configWelcome",
          "name": "Configure your extension",
          "when": "abtasty:explorer == welcomePage"
        },
        {
          "id": "featureExperimentation.quickAccess",
          "name": "Quick Access",
          "contextualTitle": "AB Tasty",
          "when": "abtasty:explorer == featureExperimentation"
        },
        {
          "id": "featureExperimentation.flagsInFile",
          "name": "Flags in file",
          "when": "abtasty:explorer == featureExperimentation"
        },
        {
          "id": "featureExperimentation.projectList",
          "name": "Project",
          "when": "abtasty:explorer == featureExperimentation"
        },
        {
          "id": "featureExperimentation.flagList",
          "name": "Feature Flags",
          "when": "abtasty:explorer == featureExperimentation"
        },
        {
          "id": "featureExperimentation.targetingKeyList",
          "name": "Targeting Key",
          "when": "abtasty:explorer == featureExperimentation"
        },
        {
          "id": "featureExperimentation.goalList",
          "name": "Goal",
          "when": "abtasty:explorer == featureExperimentation"
        },
        {
          "id": "webExperimentation.quickAccess",
          "name": "Quick Access",
          "contextualTitle": "AB Tasty",
          "when": "abtasty:explorer == webExperimentation"
        },
        {
          "id": "webExperimentation.accountList",
          "name": "Account",
          "when": "abtasty:explorer == webExperimentation"
        },
        {
          "id": "webExperimentation.campaignList",
          "name": "Campaign",
          "when": "abtasty:explorer == webExperimentation"
        },
        {
          "id": "webExperimentation.modificationList",
          "name": "Modification",
          "when": "abtasty:explorer == webExperimentation"
        },
        {
          "id": "webExperimentation.variationList",
          "name": "Variation",
          "when": "abtasty:explorer == webExperimentation"
        },
        {
          "id": "webExperimentation.treeCode",
          "name": "Tree Code",
          "when": "abtasty:explorer == webExperimentation"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "configWelcome",
        "contents": "Welcome to AB Tasty !\n Here are your first steps into our extension which will help you work with us.\nFor Feature experimentation, you have to set your credentials to connect your account\n[Configure Feature Exp](command:featureExperimentation.setCredentials)\n [Read our docs](https://docs.developers.flagship.io/docs/flagship-code) to learn more about how to use the Flagship extension.\nIf you need some help to understand how to retrieve your IDs [here are all the information you need](https://flagship.zendesk.com/hc/en-us/articles/4499017687708--Acting-on-your-account-remotely).\n If you need some help to setup a JSON file to store your credentials [here are all the information you need](https://docs.developers.flagship.io/docs/cli-configure).\nFor Web experimentation, you have to sign on\n[Configure Web Exp](command:webExperimentation.setCredentials)\n [Read our docs](https://docs.developers.flagship.io/docs/flagship-code) to learn more about how to use the Flagship extension."
      }
    ],
    "commands": [
      {
        "command": "featureExperimentation.clearConfig",
        "title": "Feature Experimentation: Clear all configurations"
      },
      {
        "command": "abtasty.checkCliVersion",
        "title": "Feature Experimentation: Check CLI version"
      },
      {
        "command": "featureExperimentation.openBrowser",
        "title": "Feature Experimentation: Open in browser"
      },
      {
        "command": "featureExperimentation.getTokenScope",
        "title": "Feature Experimentation: Get token scope"
      },
      {
        "command": "featureExperimentation.triggerFlagCompletion",
        "title": "Feature Experimentation: Trigger flag autocompletion"
      },
      {
        "command": "abtasty.showSurvey",
        "title": "AB Tasty: Show survey"
      },
      {
        "command": "featureExperimentation.flagsInFile.refresh",
        "title": "Feature Experimentation: Refresh flags in file panel",
        "icon": "$(refresh)"
      },
      {
        "command": "featureExperimentation.flagsInFile.listFlagInWorkspace",
        "title": "abtasty: List flags in the workspace",
        "icon": "$(list-flat)"
      },
      {
        "command": "featureExperimentation.createFlag",
        "title": "Feature Experimentation: Create a flag",
        "icon": "$(add)"
      },
      {
        "command": "featureExperimentation.flagList.refresh",
        "title": "Feature Experimentation: Refresh flag panel",
        "icon": "$(refresh)"
      },
      {
        "command": "featureExperimentation.flagList.openInBrowser",
        "title": "Feature Experimentation: Open the flag list in browser",
        "icon": "$(globe)"
      },
      {
        "command": "featureExperimentation.flagList.copyFlag",
        "title": "Feature Experimentation: Copy the flag in clipboard",
        "icon": "$(clippy)"
      },
      {
        "command": "featureExperimentation.flagList.editFlag",
        "title": "Feature Experimentation: Edit the flag",
        "icon": "$(pencil)"
      },
      {
        "command": "featureExperimentation.flagList.deleteFlag",
        "title": "Feature Experimentation: Remove the flag",
        "icon": "$(trash)"
      },
      {
        "command": "featureExperimentation.createProject",
        "title": "Feature Experimentation: Create a project",
        "icon": "$(add)"
      },
      {
        "command": "featureExperimentation.projectList.copyProject",
        "title": "Feature Experimentation: Copy the project id",
        "icon": "$(clippy)"
      },
      {
        "command": "featureExperimentation.projectList.refresh",
        "title": "Feature Experimentation: Refresh project panel",
        "icon": "$(refresh)"
      },
      {
        "command": "featureExperimentation.projectList.editProject",
        "title": "Feature Experimentation: Edit the project",
        "icon": "$(pencil)"
      },
      {
        "command": "featureExperimentation.projectList.deleteProject",
        "title": "Feature Experimentation: Remove the project",
        "icon": "$(trash)"
      },
      {
        "command": "featureExperimentation.campaignList.openInBrowser",
        "title": "Feature Experimentation: Open campaign in the platform",
        "icon": "$(link-external)"
      },
      {
        "command": "featureExperimentation.campaignList.copyCampaign",
        "title": "Feature Experimentation: Copy the campaign id",
        "icon": "$(clippy)"
      },
      {
        "command": "featureExperimentation.variationGroupList.copyVariationGroup",
        "title": "Feature Experimentation: Copy the variation group id",
        "icon": "$(clippy)"
      },
      {
        "command": "featureExperimentation.variationList.copyVariation",
        "title": "Feature Experimentation: Copy the variation id",
        "icon": "$(clippy)"
      },
      {
        "command": "featureExperimentation.createTargetingKey",
        "title": "Feature Experimentation: Create a targeting key",
        "icon": "$(add)"
      },
      {
        "command": "featureExperimentation.targetingKeyList.refresh",
        "title": "Feature Experimentation: Refresh targeting key panel",
        "icon": "$(refresh)"
      },
      {
        "command": "featureExperimentation.targetingKeyList.editTargetingKey",
        "title": "Feature Experimentation: Edit the targeting key",
        "icon": "$(pencil)"
      },
      {
        "command": "featureExperimentation.targetingKeyList.deleteTargetingKey",
        "title": "Feature Experimentation: Remove the targeting key",
        "icon": "$(trash)"
      },
      {
        "command": "featureExperimentation.createGoal",
        "title": "Feature Experimentation: Create a goal",
        "icon": "$(add)"
      },
      {
        "command": "featureExperimentation.goalList.refresh",
        "title": "Feature Experimentation: Refresh goal panel",
        "icon": "$(refresh)"
      },
      {
        "command": "featureExperimentation.goalList.editGoal",
        "title": "Feature Experimentation: Edit the goal",
        "icon": "$(pencil)"
      },
      {
        "command": "featureExperimentation.goalList.deleteGoal",
        "title": "Feature Experimentation: Remove the goal",
        "icon": "$(trash)"
      },
      {
        "command": "featureExperimentation.flagsInFile.findInFile",
        "title": "Feature Experimentation: Find flag in file",
        "icon": "$(search)"
      },
      {
        "command": "featureExperimentation.flagsInFile.addFlag",
        "title": "Feature Experimentation: Add Flag found in flag in file panel",
        "icon": "$(add)"
      },
      {
        "command": "webExperimentation.modificationList.refresh",
        "title": "Web Experimentation: Refresh modification panel",
        "icon": "$(refresh)"
      },
      {
        "command": "webExperimentation.variationList.refresh",
        "title": "Web Experimentation: Refresh variation panel",
        "icon": "$(refresh)"
      },
      {
        "command": "webExperimentation.treeCode.refresh",
        "title": "Web Experimentation: Refresh Tree code panel",
        "icon": "$(refresh)"
      },
      {
        "command": "webExperimentation.campaignList.refresh",
        "title": "Web Experimentation: Refresh campaign panel",
        "icon": "$(refresh)"
      },
      {
        "command": "webExperimentation.accountList.refresh",
        "title": "Web Experimentation: Refresh account panel",
        "icon": "$(refresh)"
      },
      {
        "command": "webExperimentation.modificationList.deleteModification",
        "title": "Web Experimentation: Remove the modification",
        "icon": "$(trash)"
      },
      {
        "command": "webExperimentation.variationList.deleteVariation",
        "title": "Web Experimentation: Remove the variation",
        "icon": "$(trash)"
      },
      {
        "command": "webExperimentation.campaignList.deleteCampaign",
        "title": "Web Experimentation: Remove the goal",
        "icon": "$(trash)"
      },
      {
        "command": "webExperimentation.campaignList.setCampaign",
        "title": "Set as global campaign",
        "icon": "$(run)"
      },
      {
        "command": "webExperimentation.campaignList.pullGlobalCode",
        "title": "Pull campaign global code from the platform",
        "icon": "$(run)"
      },
      {
        "command": "webExperimentation.campaignList.pushGlobalCode",
        "title": "Push campaign global code to the platform",
        "icon": "$(run)"
      },
      {
        "command": "webExperimentation.accountList.selectAccount",
        "title": "Web Experimentation: select account",
        "icon": "$(run)"
      },
      {
        "command": "webExperimentation.treeCode.openFile",
        "title": "Web Experimentation: Open code file"
      }
    ],
    "menus": {
      "view/title": [
        {
          "command": "featureExperimentation.flagsInFile.refresh",
          "when": "view == featureExperimentation.flagsInFile",
          "group": "navigation@0"
        },
        {
          "command": "featureExperimentation.flagsInFile.listFlagInWorkspace",
          "when": "view == featureExperimentation.flagsInFile",
          "group": "navigation@0"
        },
        {
          "command": "featureExperimentation.createProject",
          "when": "view == featureExperimentation.projectList",
          "group": "navigation@0"
        },
        {
          "command": "featureExperimentation.projectList.refresh",
          "when": "view == featureExperimentation.projectList",
          "group": "navigation@0"
        },
        {
          "command": "featureExperimentation.createTargetingKey",
          "when": "view == featureExperimentation.targetingKeyList",
          "group": "navigation@0"
        },
        {
          "command": "featureExperimentation.targetingKeyList.refresh",
          "when": "view == featureExperimentation.targetingKeyList",
          "group": "navigation@0"
        },
        {
          "command": "featureExperimentation.createGoal",
          "when": "view == featureExperimentation.goalList",
          "group": "navigation@0"
        },
        {
          "command": "featureExperimentation.goalList.refresh",
          "when": "view == featureExperimentation.goalList",
          "group": "navigation@0"
        },
        {
          "command": "featureExperimentation.createFlag",
          "when": "view == featureExperimentation.flagList",
          "group": "navigation@0"
        },
        {
          "command": "featureExperimentation.flagList.refresh",
          "when": "view == featureExperimentation.flagList",
          "group": "navigation@0"
        },
        {
          "command": "featureExperimentation.flagList.openInBrowser",
          "when": "view == featureExperimentation.flagList",
          "group": "navigation@0"
        },
        {
          "command": "webExperimentation.modificationList.refresh",
          "when": "view == webExperimentation.modificationList",
          "group": "navigation@0"
        },
        {
          "command": "webExperimentation.variationList.refresh",
          "when": "view == webExperimentation.variationList",
          "group": "navigation@0"
        },
        {
          "command": "webExperimentation.treeCode.refresh",
          "when": "view == webExperimentation.treeCode",
          "group": "navigation@0"
        },
        {
          "command": "webExperimentation.campaignList.refresh",
          "when": "view == webExperimentation.campaignList",
          "group": "navigation@0"
        },
        {
          "command": "webExperimentation.accountList.refresh",
          "when": "view == webExperimentation.accountList",
          "group": "navigation@0"
        }
      ],
      "view/item/context": [
        {
          "command": "featureExperimentation.projectList.copyProject",
          "when": "view == featureExperimentation.projectList && viewItem == projectItem",
          "group": "inline"
        },
        {
          "command": "featureExperimentation.projectList.deleteProject",
          "when": "view == featureExperimentation.projectList && viewItem == projectItem",
          "group": "inline"
        },
        {
          "command": "featureExperimentation.projectList.editProject",
          "when": "view == featureExperimentation.projectList && viewItem == projectItem",
          "group": "inline"
        },
        {
          "command": "featureExperimentation.campaignList.copyCampaign",
          "when": "view == featureExperimentation.projectList && viewItem == campaignItem",
          "group": "inline"
        },
        {
          "command": "featureExperimentation.campaignList.openInBrowser",
          "when": "view == featureExperimentation.projectList && viewItem == campaignItem",
          "group": "inline"
        },
        {
          "command": "featureExperimentation.variationGroupList.copyVariationGroup",
          "when": "view == featureExperimentation.projectList && viewItem == variationGroupItem",
          "group": "inline"
        },
        {
          "command": "featureExperimentation.variationList.copyVariation",
          "when": "view == featureExperimentation.projectList && viewItem == variationItem",
          "group": "inline"
        },
        {
          "command": "featureExperimentation.targetingKeyList.deleteTargetingKey",
          "when": "view == featureExperimentation.targetingKeyList && viewItem == targetingKeyItem",
          "group": "inline"
        },
        {
          "command": "featureExperimentation.targetingKeyList.editTargetingKey",
          "when": "view == featureExperimentation.targetingKeyList && viewItem == targetingKeyItem",
          "group": "inline"
        },
        {
          "command": "featureExperimentation.goalList.deleteGoal",
          "when": "view == featureExperimentation.goalList && viewItem == goalItem",
          "group": "inline"
        },
        {
          "command": "featureExperimentation.goalList.editGoal",
          "when": "view == featureExperimentation.goalList && viewItem == goalItem",
          "group": "inline"
        },
        {
          "command": "featureExperimentation.flagList.deleteFlag",
          "when": "view == featureExperimentation.flagList && viewItem == flagItem",
          "group": "inline"
        },
        {
          "command": "featureExperimentation.flagList.editFlag",
          "when": "view == featureExperimentation.flagList && viewItem == flagItem",
          "group": "inline"
        },
        {
          "command": "featureExperimentation.flagList.copyFlag",
          "when": "view == featureExperimentation.flagList && viewItem == flagItem",
          "group": "inline"
        },
        {
          "command": "featureExperimentation.flagsInFile.findInFile",
          "when": "view == featureExperimentation.flagsInFile && viewItem == flagAnalyzedItem",
          "group": "inline"
        },
        {
          "command": "featureExperimentation.flagsInFile.addFlag",
          "when": "view == featureExperimentation.flagsInFile && viewItem == flagAnalyzedItem",
          "group": "inline"
        },
        {
          "command": "webExperimentation.modificationList.deleteModification",
          "when": "view == webExperimentation.modificationList && viewItem == modificationWEItem",
          "group": "inline"
        },
        {
          "command": "webExperimentation.variationList.deleteVariation",
          "when": "view == webExperimentation.variationList && viewItem == variationWEItem",
          "group": "inline"
        },
        {
          "command": "webExperimentation.campaignList.deleteCampaign",
          "when": "view == webExperimentation.campaignList && viewItem == campaignWEItem",
          "group": "inline"
        },
        {
          "command": "webExperimentation.campaignList.setCampaign",
          "when": "view == webExperimentation.campaignList && viewItem == campaignWEItem",
          "group": "navigation"
        },
        {
          "command": "webExperimentation.campaignList.pullGlobalCode",
          "when": "view == webExperimentation.campaignList && viewItem == campaignWEItem",
          "group": "navigation"
        },
        {
          "command": "webExperimentation.campaignList.pushGlobalCode",
          "when": "view == webExperimentation.campaignList && viewItem == campaignWEItem",
          "group": "navigation"
        },
        {
          "command": "webExperimentation.accountList.selectAccount",
          "when": "view == webExperimentation.accountList && viewItem == accountWEItem",
          "group": "inline"
        },
        {
          "command": "webExperimentation.treeCode.openFile",
          "when": "view == webExperimentation.treeCode && viewItem == fileWEItem",
          "group": "navigation"
        }
      ]
    },
    "keybindings": [
      {
        "command": "featureExperimentation.triggerFlagCompletion",
        "key": "ctrl+alt+g",
        "mac": "cmd+alt+g"
      }
    ],
    "languages": [
      {
        "id": "dart",
        "aliases": [
          "Dart"
        ],
        "extensions": [
          ".dart"
        ]
      },
      {
        "id": "kotlin",
        "aliases": [
          "Kotlin"
        ],
        "extensions": [
          ".kt",
          ".kts"
        ]
      },
      {
        "id": "go",
        "aliases": [
          "Go"
        ],
        "extensions": [
          ".go"
        ]
      },
      {
        "id": "javascript",
        "aliases": [
          "Javascript"
        ],
        "extensions": [
          ".js"
        ]
      },
      {
        "id": "typescript",
        "aliases": [
          "Typescript"
        ],
        "extensions": [
          ".ts"
        ]
      },
      {
        "id": "java",
        "aliases": [
          "Java"
        ],
        "extensions": [
          ".java"
        ]
      },
      {
        "id": "php",
        "aliases": [
          "PHP"
        ],
        "extensions": [
          ".php"
        ]
      },
      {
        "id": "python",
        "aliases": [
          "Python"
        ],
        "extensions": [
          ".py"
        ]
      },
      {
        "id": "csharp",
        "aliases": [
          "CSharp"
        ],
        "extensions": [
          ".cs"
        ]
      },
      {
        "id": "fsharp",
        "aliases": [
          "FSharp"
        ],
        "extensions": [
          ".fs"
        ]
      },
      {
        "id": "vb",
        "extensions": [
          ".vb"
        ]
      },
      {
        "id": "swift",
        "aliases": [
          "Swift"
        ],
        "extensions": [
          ".swift"
        ]
      },
      {
        "id": "objective-c",
        "extensions": [
          ".m"
        ]
      }
    ]
  },
  "galleryBanner": {
    "color": "#343434",
    "theme": "dark"
  },
  "homepage": "https://docs.developers.flagship.io/docs/abtasty-code",
  "bugs": {
    "url": "https://github.com/flagship-io/abtasty-code/issues"
  },
  "scripts": {
    "vscode:prepublish": "yarn run package",
    "compile": "webpack",
    "watch": "webpack --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "yarn run compile-tests && yarn run compile && yarn run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@types/glob": "^8.1.0",
    "@types/js-yaml": "^4.0.5",
    "@types/mocha": "^10.0.1",
    "@types/node": "16.x",
    "@types/tar-fs": "^2.0.1",
    "@types/vscode": "^1.72.0",
    "@typescript-eslint/eslint-plugin": "^5.56.0",
    "@typescript-eslint/parser": "^5.56.0",
    "@vscode/test-electron": "^2.3.0",
    "eslint": "^8.36.0",
    "glob": "^8.1.0",
    "mocha": "^10.2.0",
    "ts-loader": "^9.4.2",
    "typescript": "^4.9.5",
    "webpack": "^5.76.3",
    "webpack-cli": "^5.0.1"
  },
  "dependencies": {
    "axios": "^1.3.5",
    "rimraf": "^5.0.0",
    "tar-fs": "^3.0.3"
  }
}